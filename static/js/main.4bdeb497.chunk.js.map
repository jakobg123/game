{"version":3,"sources":["utils/board.js","components/Obstacle/Obstacle.jsx","components/Game/Game.jsx","utils/options.js","App.js","reportWebVitals.js","index.js"],"names":["BOARD_GRID","row","col","push","getWhiteCellColor","index","Obstacle","counter","destroyClass","className","Game","useState","snake","setSnake","obstacles","setObstacles","validMoves","setValidMoves","score","setScore","startGame","setStartGame","useEffect","snakeHead","getRandomPosition","length","getValidMoves","getRandomObstacle","getDirections","up","right","down","left","moves","directions","checkMove","cellIsOccupiedBy","possibleOccupant","cell","some","part","checkIfPartIsOnCell","move","moveIsOutOfBounds","randomObstacle","updatedObstacles","updateObstacleCounterAndRemoveIfZero","obstaclesToBeUpdated","reduce","filtered","obstacle","updatedCounter","updatedObstacle","Math","floor","random","moveSnake","direction","updatedSnake","unshift","pop","updateGame","getSnakeStyle","snakePartIndex","findIndex","snakePart","transform","toString","getObstacleCounter","filter","boardJsx","map","style","onClick","cellToMoveTo","newDirection","directionToMoveTo","JSON","stringify","handleClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qKAIA,I,yDADIA,EAAa,GACTC,EAAM,EAAGA,EAJS,EAISA,IAC/B,IAAI,IAAIC,EAAM,EAAGA,EAJQ,EAIaA,IAClCF,EAAWG,KAAK,CAACF,MAAKC,QAKvB,IAAME,EAAoB,SAACH,EAAKI,GACnC,OAAGJ,EAAM,IAAM,GAAKI,EAAQ,IAAM,GAG9BJ,EAAM,IAAM,GAAKI,EAAQ,IAAM,EAFxB,0BAKJ,I,eChBEC,EAAW,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAClBC,EAAe,GAYnB,OAVe,IAAZD,IACCC,EAAe,+CAEJ,IAAZD,IACCC,EAAe,6CAEJ,IAAZD,IACCC,EAAe,6CAIf,qBACAC,UAAS,kBAAeD,GAA8B,OC2M/CE,G,MAtNF,WACT,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAoCJ,mBAAS,IAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAA0BN,mBAAS,GAAnC,mBAAOO,EAAP,KAAcC,EAAd,KACA,EAAkCR,oBAAS,GAA3C,mBAAOS,EAAP,KAAkBC,EAAlB,KAEAC,qBAAU,WACF,IAAMC,EAAYC,IAClBX,EAAS,GAAD,mBAAKD,GAAL,CAAYW,OACzB,CAACH,IAEJE,qBAAU,WACc,IAAjBV,EAAMa,QACLR,EAAcS,KAGfd,EAAMa,OAAS,GACdV,EAAaY,OAElB,CAACf,IAEJU,qBAAU,WACNL,EAAcS,OACf,CAACZ,IAEJ,IAAMc,EAAgB,SAACL,GAAD,MAAiB,CACnCM,GAAI,CAAC5B,IAAKsB,EAAUtB,IAAM,EAAGC,IAAKqB,EAAUrB,KAC5C4B,MAAO,CAAC7B,IAAKsB,EAAUtB,IAAKC,IAAKqB,EAAUrB,IAAM,GACjD6B,KAAM,CAAC9B,IAAKsB,EAAUtB,IAAM,EAAGC,IAAKqB,EAAUrB,KAC9C8B,KAAM,CAAC/B,IAAKsB,EAAUtB,IAAKC,IAAKqB,EAAUrB,IAAM,KAG9CwB,EAAgB,WAClB,IAAIO,EAAQ,GACZ,GAAKrB,EAAMa,OAAO,CACd,IAAMF,EAAYX,EAAM,GAClBsB,EAAaN,EAAcL,GAE9BY,EAAUD,EAAWL,MACpBI,EAAQ,CAACC,EAAWL,KAErBM,EAAUD,EAAWJ,SACpBG,EAAK,sBAAOA,GAAP,CAAcC,EAAWJ,SAE/BK,EAAUD,EAAWH,QACpBE,EAAK,sBAAOA,GAAP,CAAcC,EAAWH,QAE/BI,EAAUD,EAAWF,QACpBC,EAAK,sBAAOA,GAAP,CAAcC,EAAWF,QAGtC,OAAOC,GAKLG,EAAmB,SAACC,EAAkBC,GAAnB,OAA4BD,EAAiBE,MAAK,SAACC,GAAD,OAAUC,EAAoBD,EAAMF,OAEzGG,EAAsB,SAACD,EAAMF,GAAP,OAAgBE,EAAKvC,MAAQqC,EAAKrC,KAAOuC,EAAKtC,MAAQoC,EAAKpC,KAEjFiC,EAAY,SAACO,GAEf,OARsB,SAACA,GAAD,OAAUA,EAAKzC,IAAM,GAAKyC,EAAKzC,KF7DnC,GE6DwDyC,EAAKxC,IAAM,GAAKwC,EAAKxC,KF5D1E,EEoElByC,CAAkBD,MAIlBN,EAAiBxB,EAAO8B,KAIxBN,EAAiBtB,EAAW4B,KAO7Bf,EAAoB,SAApBA,IACF,IAAIiB,EAAiBpB,IAErB,GAAGY,EAAiBxB,EAAOgC,IAAmBR,EAAiBtB,EAAW8B,GACtE,OAAOjB,IAGXiB,EAAerC,QAAU,GAEzB,IAAIsC,EAAmBC,EAAqC,YAAIhC,IAEhE,MAAM,GAAN,mBAAW+B,GAAX,CAA6BD,KAG3BE,EAAuC,SAACC,GAC1C,OAAOA,EAAqBC,QAAO,SAACC,EAAUC,GAC1C,IAAMC,EAAiBD,EAAS3C,QAAU,EAE1C,GAAG4C,EAAiB,EAAE,CAClB,IAAMC,EAAe,2BAAOF,GAAP,IAAiB3C,QAAS4C,IAC/CF,EAAS9C,KAAKiD,GAElB,OAAOH,IACR,KAGDzB,EAAoB,iBACtB,CACIvB,IAAKoD,KAAKC,MFhHI,EEgHED,KAAKE,UACrBrD,IAAKmD,KAAKC,MFhHO,EEgHDD,KAAKE,YA0BvBC,EAAY,SAACC,GACf,IAAIC,EAAY,YAAO9C,GAEvB8C,EAAaC,QAAQF,GAElBC,EAAajC,OChJQ,GDiJpBiC,EAAaE,MAGjBC,EAAWH,IAGTG,EAAa,SAACH,GAChB7C,EAAS6C,GACTvC,EAASD,EAAQ,IAGf4C,EAAgB,SAACxB,GACnB,IAAMyB,EAAiBnD,EAAMoD,WAAU,SAAAC,GAAS,OAAIxB,EAAoBwB,EAAW3B,MAEnF,MAAO,CAAC4B,UAAU,SAAD,QADE,EAAKH,EC9JA,GD+JeI,WAAtB,OAGfC,EAAqB,SAAC9B,GACxB,GAAIA,EAAJ,CAGA,MAAoBxB,EAAUuD,QAAO,SAAAnB,GAAQ,OAAIA,EAASjD,MAAQqC,EAAKrC,KAAOiD,EAAShD,MAAQoC,EAAKpC,OACpG,OADA,oBAAQK,UAYN+D,EAAWtE,EAAWuE,KAAI,SAACjC,EAAMjC,GAAP,OAC5B,sBAAKI,UAAS,yBAAoBL,EAAkBkC,EAAKrC,IAAKI,IAA9D,UAES+B,EAAiBxB,EAAO0B,IACrB,qBACA7B,UAAS,eACT+D,MAAOV,EAAcxB,KAIxBF,EAAiBpB,EAAYsB,IAC1B,qBACA7B,UAAS,mBACTgE,QAAS,kBA1EL,SAACC,GACjB,IAAIC,EAAe,CAAC1E,IAAKW,EAAM,GAAGX,IAAMyE,EAAazE,IAAKC,IAAKU,EAAM,GAAGV,IAAMwE,EAAaxE,KACvF0E,EAAoB,GAExB,OAAOC,KAAKC,UAAUH,IAClB,KAAKE,KAAKC,UAAU,CAAE7E,IAAK,EAAGC,IAAK,IAC/B0E,EAAoB,KACpB,MACJ,KAAKC,KAAKC,UAAU,CAAE7E,KAAM,EAAGC,IAAK,IAChC0E,EAAoB,OACpB,MACJ,KAAKC,KAAKC,UAAU,CAAE7E,IAAK,EAAGC,IAAK,IAC/B0E,EAAoB,OACpB,MACJ,KAAKC,KAAKC,UAAU,CAAE7E,IAAK,EAAGC,KAAM,IAChC0E,EAAoB,QAI5BpB,EAAU5B,EAAchB,EAAM,IAAIgE,IAuDPG,CAAYzC,MAI9BF,EAAiBtB,EAAWwB,IACzB,cAAC,EAAD,CAAU/B,QAAS6D,EAAmB9B,OAjB2BA,EAAKrC,IAAIkE,WAAY7B,EAAKpC,IAAIiE,eAuB/G,OACI,qCACI,yCAAYjD,KACZ,sBAAKT,UAAU,QAAf,UACK6D,GACEtD,EAAWS,UAAYX,EAAUW,QAChC,sBACAhB,UAAS,kBADT,gBAEI,2CACA,wBAAQgE,QAzCZ,WACZxD,EAAc,IACdJ,EAAS,IACTE,EAAa,IACbI,EAAS,GACTE,GAAcD,IAoCE,gC,MExMT4D,MARf,WACE,OACE,qBAAKvE,UAAU,MAAf,SACE,cAAC,EAAD,OCMSwE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4bdeb497.chunk.js","sourcesContent":["export const BOARD_ROWS = 8;\r\nexport const BOARD_COLUMNS = 8;\r\n    \r\nlet BOARD_GRID = [];\r\nfor(let row = 0; row < BOARD_ROWS; row++){\r\n    for(let col = 0; col < BOARD_COLUMNS; col++){\r\n        BOARD_GRID.push({row, col})\r\n    }\r\n}\r\nexport {BOARD_GRID};\r\n\r\nexport const getWhiteCellColor = (row, index) => {\r\n    if(row % 2 === 0 && index % 2 === 0){\r\n        return \" Board__GridCell--White\";\r\n    } \r\n    if (row % 2 === 1 && index % 2 === 1){\r\n        return \" Board__GridCell--White\";\r\n    }\r\n    return \"\";\r\n}\r\n\r\n","import \"./Obstacle.scss\";\r\n\r\nexport const Obstacle = ({counter}) => {\r\n    let destroyClass = \"\";\r\n\r\n    if(counter === 3){\r\n        destroyClass = \" Obstacle__Destroy Obstacle__Destroy--Three\";\r\n    }\r\n    if(counter === 2){\r\n        destroyClass = \" Obstacle__Destroy Obstacle__Destroy--Two\";\r\n    }\r\n    if(counter === 1){\r\n        destroyClass = \" Obstacle__Destroy Obstacle__Destroy--One\";\r\n    }\r\n\r\n    return (\r\n        <div \r\n        className={`Obstacle${!!destroyClass ? destroyClass : \"\"}`} \r\n        ></div>\r\n    )\r\n};","import {useState, useEffect} from 'react';\r\nimport {BOARD_ROWS, BOARD_COLUMNS, BOARD_GRID, getWhiteCellColor} from \"../../utils/board\";\r\nimport {MAX_SNAKE_LENGTH} from \"../../utils/options\";\r\nimport {Obstacle} from \"../Obstacle/Obstacle.jsx\";\r\nimport \"./Game.scss\";\r\n\r\nconst Game = () => {\r\n    const [snake, setSnake] = useState([]);\r\n    const [obstacles, setObstacles] = useState([]);\r\n    const [validMoves, setValidMoves] = useState([]);\r\n    const [score, setScore] = useState(0);\r\n    const [startGame, setStartGame] = useState(false)\r\n\r\n    useEffect(() => {\r\n            const snakeHead = getRandomPosition();\r\n            setSnake([...snake, snakeHead]);\r\n    }, [startGame])\r\n\r\n    useEffect(() => {\r\n        if(snake.length === 1){\r\n            setValidMoves(getValidMoves());\r\n        }\r\n\r\n        if(snake.length > 1){\r\n            setObstacles(getRandomObstacle());\r\n        }\r\n    }, [snake])\r\n\r\n    useEffect(() => {\r\n        setValidMoves(getValidMoves());\r\n    }, [obstacles])\r\n\r\n    const getDirections = (snakeHead) => ( {\r\n        up: {row: snakeHead.row - 1, col: snakeHead.col},\r\n        right: {row: snakeHead.row, col: snakeHead.col + 1},\r\n        down: {row: snakeHead.row + 1, col: snakeHead.col},\r\n        left: {row: snakeHead.row, col: snakeHead.col - 1},\r\n    });\r\n\r\n    const getValidMoves = () => {\r\n        let moves = [];\r\n        if(!!snake.length){\r\n            const snakeHead = snake[0];\r\n            const directions = getDirections(snakeHead);\r\n\r\n            if(checkMove(directions.up)){\r\n                moves = [directions.up]\r\n            }\r\n            if(checkMove(directions.right)){\r\n                moves = [...moves, directions.right]\r\n            }\r\n            if(checkMove(directions.down)){\r\n                moves = [...moves, directions.down]\r\n            }\r\n            if(checkMove(directions.left)){\r\n                moves = [...moves, directions.left]\r\n            }\r\n        }\r\n        return moves;\r\n    }\r\n\r\n    const moveIsOutOfBounds = (move) => move.row < 0 || move.row >= BOARD_ROWS || move.col < 0 || move.col >= BOARD_COLUMNS;\r\n\r\n    const cellIsOccupiedBy = (possibleOccupant, cell) => possibleOccupant.some((part) => checkIfPartIsOnCell(part, cell));\r\n\r\n    const checkIfPartIsOnCell = (part, cell) => part.row === cell.row && part.col === cell.col;\r\n\r\n    const checkMove = (move) => {\r\n\r\n        if(moveIsOutOfBounds(move)){\r\n            return false;\r\n        }\r\n        \r\n        if(cellIsOccupiedBy(snake, move)){\r\n            return false;\r\n        }\r\n\r\n        if(cellIsOccupiedBy(obstacles, move)){\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    const getRandomObstacle = () => {\r\n        let randomObstacle = getRandomPosition();\r\n\r\n        if(cellIsOccupiedBy(snake, randomObstacle) || cellIsOccupiedBy(obstacles, randomObstacle)){\r\n            return getRandomObstacle();\r\n        }\r\n\r\n        randomObstacle.counter = 20;\r\n        \r\n        let updatedObstacles = updateObstacleCounterAndRemoveIfZero([...obstacles]);\r\n\r\n        return [...updatedObstacles, randomObstacle];\r\n    }\r\n\r\n    const updateObstacleCounterAndRemoveIfZero = (obstaclesToBeUpdated) => {\r\n        return obstaclesToBeUpdated.reduce((filtered, obstacle) => {\r\n            const updatedCounter = obstacle.counter - 1;\r\n\r\n            if(updatedCounter > 0){\r\n                const updatedObstacle = {...obstacle, counter: updatedCounter};\r\n                filtered.push(updatedObstacle);\r\n            }\r\n            return filtered;\r\n        }, []);\r\n    };\r\n\r\n    const getRandomPosition = () => (\r\n        {\r\n            row: Math.floor(Math.random() * BOARD_ROWS),\r\n            col: Math.floor(Math.random() * BOARD_COLUMNS),\r\n        }\r\n    )\r\n\r\n    const handleClick = (cellToMoveTo) => {\r\n        let newDirection = {row: snake[0].row - cellToMoveTo.row, col: snake[0].col - cellToMoveTo.col};\r\n        let directionToMoveTo = \"\";\r\n        \r\n        switch(JSON.stringify(newDirection)){\r\n            case JSON.stringify({ row: 1, col: 0 }):\r\n                directionToMoveTo = \"up\";\r\n                break;\r\n            case JSON.stringify({ row: -1, col: 0 }):\r\n                directionToMoveTo = \"down\";\r\n                break;\r\n            case JSON.stringify({ row: 0, col: 1 }):\r\n                directionToMoveTo = \"left\";\r\n                break;\r\n            case JSON.stringify({ row: 0, col: -1 }):\r\n                directionToMoveTo = \"right\";\r\n                break;\r\n        }\r\n    \r\n        moveSnake(getDirections(snake[0])[directionToMoveTo]);\r\n    }\r\n\r\n    const moveSnake = (direction) =>{\r\n        let updatedSnake = [...snake];\r\n        \r\n        updatedSnake.unshift(direction);\r\n\r\n        if(updatedSnake.length > MAX_SNAKE_LENGTH){\r\n            updatedSnake.pop();\r\n        }\r\n\r\n        updateGame(updatedSnake);\r\n    }\r\n\r\n    const updateGame = (updatedSnake) => {\r\n        setSnake(updatedSnake);\r\n        setScore(score + 1);\r\n    }\r\n\r\n    const getSnakeStyle = (cell) => {\r\n        const snakePartIndex = snake.findIndex(snakePart => checkIfPartIsOnCell(snakePart, cell));\r\n        const scaleValue = 1 - (snakePartIndex/MAX_SNAKE_LENGTH);\r\n        return {transform: `scale(${scaleValue.toString()})`};\r\n    }\r\n\r\n    const getObstacleCounter = (cell) => {\r\n        if(!cell){\r\n            return;\r\n        }\r\n        const [{counter}] = obstacles.filter(obstacle => obstacle.row === cell.row && obstacle.col === cell.col);\r\n        return counter;\r\n    }\r\n\r\n    const restart = () => {\r\n        setValidMoves([]);\r\n        setSnake([]);\r\n        setObstacles([]);\r\n        setScore(0);\r\n        setStartGame(!startGame);\r\n    }\r\n    \r\n    const boardJsx = BOARD_GRID.map((cell, index) => (\r\n        <div className={`Board__GridCell${getWhiteCellColor(cell.row, index)}`} key={cell.row.toString()+ cell.col.toString()}>\r\n                \r\n                {cellIsOccupiedBy(snake, cell) && (\r\n                    <div \r\n                    className={`Board__Snake`} \r\n                    style={getSnakeStyle(cell)}\r\n                    ></div>\r\n                )}\r\n                \r\n                {cellIsOccupiedBy(validMoves, cell) && (\r\n                    <div \r\n                    className={`Board__ValidMove`}\r\n                    onClick={() => handleClick(cell)}\r\n                    ></div>\r\n                )}\r\n                \r\n                {cellIsOccupiedBy(obstacles, cell) && (\r\n                    <Obstacle counter={getObstacleCounter(cell)}/>\r\n                )}\r\n                \r\n        </div>\r\n    ))\r\n\r\n    return (\r\n        <>\r\n            <h1>Score: {score}</h1>\r\n            <div className=\"Board\">            \r\n                {boardJsx}\r\n                {(!validMoves.length && !!obstacles.length) && (\r\n                    <div \r\n                    className={`Board__GameOver`}\r\n                    >   <h1>GAME OVER</h1>\r\n                        <button onClick={restart}>Restart</button>\r\n                    </div>\r\n                )\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Game\r\n","export const MAX_SNAKE_LENGTH = 7;","import Game from \"./components/Game/Game\";\nimport \"./style/index.scss\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}