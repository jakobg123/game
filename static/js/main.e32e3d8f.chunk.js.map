{"version":3,"sources":["utils/board.js","utils/options.js","components/Obstacle/Obstacle.jsx","components/Game/Game.jsx","App.js","reportWebVitals.js","index.js"],"names":["BOARD_GRID","row","col","push","getWhiteCellColor","index","DIFFICULTY","easy","snakeLength","obstacleCounter","medium","hard","insane","Obstacle","counter","destroyClass","className","Game","useState","snake","setSnake","obstacles","setObstacles","validMoves","setValidMoves","score","setScore","startGame","setStartGame","difficultyLevel","setDifficultyLevel","useEffect","snakeHead","getRandomPosition","length","getValidMoves","getRandomObstacle","getDirections","up","right","down","left","moves","directions","checkMove","cellIsOccupiedBy","possibleOccupant","cell","some","part","checkIfPartIsOnCell","move","moveIsOutOfBounds","randomObstacle","updatedObstacles","updateObstacleCounterAndRemoveIfZero","obstaclesToBeUpdated","reduce","filtered","obstacle","updatedCounter","updatedObstacle","Math","floor","random","moveSnake","direction","updatedSnake","unshift","pop","updateGame","getSnakeStyle","scaleValue","findIndex","snakePart","transform","toString","getObstacleCounter","filter","boardJsx","map","style","onClick","cellToMoveTo","newDirection","directionToMoveTo","JSON","stringify","handleClick","for","id","name","onChange","event","currentTarget","value","disabled","selected","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e32e3d8f.chunk.js","sourcesContent":["export const BOARD_ROWS = 8;\r\nexport const BOARD_COLUMNS = 8;\r\n    \r\nlet BOARD_GRID = [];\r\nfor(let row = 0; row < BOARD_ROWS; row++){\r\n    for(let col = 0; col < BOARD_COLUMNS; col++){\r\n        BOARD_GRID.push({row, col})\r\n    }\r\n}\r\nexport {BOARD_GRID};\r\n\r\nexport const getWhiteCellColor = (row, index) => {\r\n    if(row % 2 === 0 && index % 2 === 0){\r\n        return \" Board__GridCell--White\";\r\n    } \r\n    if (row % 2 === 1 && index % 2 === 1){\r\n        return \" Board__GridCell--White\";\r\n    }\r\n    return \"\";\r\n}\r\n\r\n","export const DIFFICULTY = {\r\n    easy: {\r\n        snakeLength: 5, obstacleCounter: 20,\r\n    },\r\n    medium: {\r\n        snakeLength: 7, obstacleCounter: 20,\r\n    },\r\n    hard: {\r\n        snakeLength: 9, obstacleCounter: 24,\r\n        \r\n    },\r\n    insane: {\r\n        snakeLength: 11, obstacleCounter: 25,\r\n    },\r\n}","import \"./Obstacle.scss\";\r\n\r\nexport const Obstacle = ({counter}) => {\r\n    let destroyClass = \"\";\r\n\r\n    if(counter === 3){\r\n        destroyClass = \" Obstacle__Destroy Obstacle__Destroy--Three\";\r\n    }\r\n    if(counter === 2){\r\n        destroyClass = \" Obstacle__Destroy Obstacle__Destroy--Two\";\r\n    }\r\n    if(counter === 1){\r\n        destroyClass = \" Obstacle__Destroy Obstacle__Destroy--One\";\r\n    }\r\n\r\n    return (\r\n        <div \r\n        className={`Obstacle${!!destroyClass ? destroyClass : \"\"}`} \r\n        ></div>\r\n    )\r\n};","import {useState, useEffect} from 'react';\r\nimport {BOARD_ROWS, BOARD_COLUMNS, BOARD_GRID, getWhiteCellColor} from \"../../utils/board\";\r\nimport {DIFFICULTY} from \"../../utils/options\";\r\nimport {Obstacle} from \"../Obstacle/Obstacle.jsx\";\r\nimport \"./Game.scss\";\r\n\r\nconst Game = () => {\r\n    const [snake, setSnake] = useState([]);\r\n    const [obstacles, setObstacles] = useState([]);\r\n    const [validMoves, setValidMoves] = useState([]);\r\n    const [score, setScore] = useState(0);\r\n    const [startGame, setStartGame] = useState(false)\r\n    const [difficultyLevel, setDifficultyLevel] = useState(DIFFICULTY.medium)\r\n\r\n\r\n    useEffect(() => {\r\n            const snakeHead = getRandomPosition();\r\n            setSnake([...snake, snakeHead]);\r\n    }, [startGame])\r\n\r\n    useEffect(() => {\r\n        if(snake.length === 1){\r\n            setValidMoves(getValidMoves());\r\n        }\r\n\r\n        if(snake.length > 1){\r\n            setObstacles(getRandomObstacle());\r\n        }\r\n    }, [snake])\r\n\r\n    useEffect(() => {\r\n        setValidMoves(getValidMoves());\r\n    }, [obstacles])\r\n\r\n    const getDirections = (snakeHead) => ( {\r\n        up: {row: snakeHead.row - 1, col: snakeHead.col},\r\n        right: {row: snakeHead.row, col: snakeHead.col + 1},\r\n        down: {row: snakeHead.row + 1, col: snakeHead.col},\r\n        left: {row: snakeHead.row, col: snakeHead.col - 1},\r\n    });\r\n\r\n    const getValidMoves = () => {\r\n        let moves = [];\r\n        if(!!snake.length){\r\n            const snakeHead = snake[0];\r\n            const directions = getDirections(snakeHead);\r\n\r\n            if(checkMove(directions.up)){\r\n                moves = [directions.up]\r\n            }\r\n            if(checkMove(directions.right)){\r\n                moves = [...moves, directions.right]\r\n            }\r\n            if(checkMove(directions.down)){\r\n                moves = [...moves, directions.down]\r\n            }\r\n            if(checkMove(directions.left)){\r\n                moves = [...moves, directions.left]\r\n            }\r\n        }\r\n        return moves;\r\n    }\r\n\r\n    const moveIsOutOfBounds = (move) => move.row < 0 || move.row >= BOARD_ROWS || move.col < 0 || move.col >= BOARD_COLUMNS;\r\n\r\n    const cellIsOccupiedBy = (possibleOccupant, cell) => possibleOccupant.some((part) => checkIfPartIsOnCell(part, cell));\r\n\r\n    const checkIfPartIsOnCell = (part, cell) => part.row === cell.row && part.col === cell.col;\r\n\r\n    const checkMove = (move) => {\r\n\r\n        if(moveIsOutOfBounds(move)){\r\n            return false;\r\n        }\r\n        \r\n        if(cellIsOccupiedBy(snake, move)){\r\n            return false;\r\n        }\r\n\r\n        if(cellIsOccupiedBy(obstacles, move)){\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    const getRandomObstacle = () => {\r\n        let randomObstacle = getRandomPosition();\r\n\r\n        if(cellIsOccupiedBy(snake, randomObstacle) || cellIsOccupiedBy(obstacles, randomObstacle)){\r\n            return getRandomObstacle();\r\n        }\r\n\r\n        randomObstacle.counter = difficultyLevel.obstacleCounter;\r\n        \r\n        let updatedObstacles = updateObstacleCounterAndRemoveIfZero([...obstacles]);\r\n\r\n        return [...updatedObstacles, randomObstacle];\r\n    }\r\n\r\n    const updateObstacleCounterAndRemoveIfZero = (obstaclesToBeUpdated) => {\r\n        return obstaclesToBeUpdated.reduce((filtered, obstacle) => {\r\n            const updatedCounter = obstacle.counter - 1;\r\n\r\n            if(updatedCounter > 0){\r\n                const updatedObstacle = {...obstacle, counter: updatedCounter};\r\n                filtered.push(updatedObstacle);\r\n            }\r\n            return filtered;\r\n        }, []);\r\n    };\r\n\r\n    const getRandomPosition = () => (\r\n        {\r\n            row: Math.floor(Math.random() * BOARD_ROWS),\r\n            col: Math.floor(Math.random() * BOARD_COLUMNS),\r\n        }\r\n    )\r\n\r\n    const handleClick = (cellToMoveTo) => {\r\n        let newDirection = {row: snake[0].row - cellToMoveTo.row, col: snake[0].col - cellToMoveTo.col};\r\n        let directionToMoveTo = \"\";\r\n        \r\n        switch(JSON.stringify(newDirection)){\r\n            case JSON.stringify({ row: 1, col: 0 }):\r\n                directionToMoveTo = \"up\";\r\n                break;\r\n            case JSON.stringify({ row: -1, col: 0 }):\r\n                directionToMoveTo = \"down\";\r\n                break;\r\n            case JSON.stringify({ row: 0, col: 1 }):\r\n                directionToMoveTo = \"left\";\r\n                break;\r\n            case JSON.stringify({ row: 0, col: -1 }):\r\n                directionToMoveTo = \"right\";\r\n                break;\r\n        }\r\n    \r\n        moveSnake(getDirections(snake[0])[directionToMoveTo]);\r\n    }\r\n\r\n    const moveSnake = (direction) =>{\r\n        let updatedSnake = [...snake];\r\n        \r\n        updatedSnake.unshift(direction);\r\n\r\n        if(updatedSnake.length > difficultyLevel.snakeLength){\r\n            updatedSnake.pop();\r\n        }\r\n\r\n        updateGame(updatedSnake);\r\n    }\r\n\r\n    const updateGame = (updatedSnake) => {\r\n        setSnake(updatedSnake);\r\n        setScore(score + 1);\r\n    }\r\n\r\n    const getSnakeStyle = (cell) => {\r\n        const snakePartIndex = snake.findIndex(snakePart => checkIfPartIsOnCell(snakePart, cell));\r\n        \r\n        const scaleValue = 1 - (snakePartIndex/difficultyLevel.snakeLength);\r\n        \r\n        return {transform: `scale(${scaleValue.toString()})`};\r\n    }\r\n\r\n    const getObstacleCounter = (cell) => {\r\n        if(!cell){\r\n            return;\r\n        }\r\n        const [{counter}] = obstacles.filter(obstacle => obstacle.row === cell.row && obstacle.col === cell.col);\r\n        return counter;\r\n    }\r\n\r\n    const setDifficulty = (event) => {\r\n        setDifficultyLevel(DIFFICULTY[event.currentTarget.value])\r\n    }\r\n\r\n    const restart = () => {\r\n        setValidMoves([]);\r\n        setSnake([]);\r\n        setObstacles([]);\r\n        setScore(0);\r\n        setStartGame(!startGame);\r\n    }\r\n    \r\n    const boardJsx = BOARD_GRID.map((cell, index) => (\r\n        <div className={`Board__GridCell${getWhiteCellColor(cell.row, index)}`} key={cell.row.toString()+ cell.col.toString()}>\r\n                \r\n                {cellIsOccupiedBy(snake, cell) && (\r\n                    <div \r\n                    className={`Board__Snake`} \r\n                    style={getSnakeStyle(cell)}\r\n                    ></div>\r\n                )}\r\n                \r\n                {cellIsOccupiedBy(validMoves, cell) && (\r\n                    <div \r\n                    className={`Board__ValidMove`}\r\n                    onClick={() => handleClick(cell)}\r\n                    ></div>\r\n                )}\r\n                \r\n                {cellIsOccupiedBy(obstacles, cell) && (\r\n                    <Obstacle counter={getObstacleCounter(cell)}/>\r\n                )}\r\n                \r\n        </div>\r\n    ))\r\n\r\n    return (\r\n        <div className=\"Game\">  \r\n            <header className=\"Game__Header\">\r\n                <h1>Score: {score}</h1>\r\n                <form>\r\n                    <label for=\"difficulty\">Difficulty</label>\r\n                    <select id=\"difficulty\" name=\"difficulty\" onChange={setDifficulty} disabled={snake.length > 1 ? true : false}>\r\n                        <option value=\"easy\">Easy</option>\r\n                        <option selected=\"selected\" value=\"medium\">Medium</option>\r\n                        <option value=\"hard\">Hard</option>\r\n                        <option value=\"insane\">Insane</option>\r\n                    </select>\r\n                </form>\r\n            </header>\r\n            <main className=\"Board\">            \r\n                {boardJsx}\r\n                {(!validMoves.length && !!obstacles.length) && (\r\n                    <div \r\n                    className={`Board__GameOver`}\r\n                    >   <h1>GAME OVER</h1>\r\n                        <button onClick={restart}>Restart</button>\r\n                    </div>\r\n                )\r\n                }\r\n            </main>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game\r\n","import Game from \"./components/Game/Game\";\nimport \"./style/index.scss\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}